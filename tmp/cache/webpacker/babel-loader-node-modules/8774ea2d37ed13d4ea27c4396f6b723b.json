{"ast":null,"code":"var _jsxFileName = \"/Users/huiyu/WDI/unit_4/project/sign/SgSL/app/javascript/components/displayword/displayword.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport RandomWords from 'random-words';\n\nvar DisplayWord =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DisplayWord, _React$Component);\n\n  function DisplayWord() {\n    var _this;\n\n    _classCallCheck(this, DisplayWord);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DisplayWord).call(this));\n    _this.state = {\n      alphabets: []\n    };\n    return _this;\n  }\n\n  _createClass(DisplayWord, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch('/games/merdeaf.json').then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        return _this2.setState({\n          alphabets: result\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.alphabets[0].link);\n      var word = this.props.word;\n      var letters = word.split(\"\");\n      var splitword = letters.map(function (letter, index) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, letter);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"yippee display\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, splitword), React.createElement(\"button\", {\n        onClick: this.fetch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Click\"));\n    }\n  }]);\n\n  return DisplayWord;\n}(React.Component);\n\nexport { DisplayWord as default };","map":{"version":3,"sources":["/Users/huiyu/WDI/unit_4/project/sign/SgSL/app/javascript/components/displayword/displayword.jsx"],"names":["React","ReactDOM","PropTypes","RandomWords","DisplayWord","state","alphabets","fetch","then","res","json","result","setState","console","log","link","word","props","letters","split","splitword","map","letter","index","Component"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,cAAxB;;IAEqBC,W;;;;;AACjB,yBAAa;AAAA;;AAAA;;AACT;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAG;AADH,KAAb;AAFS;AAKZ;;;;wCAEmB;AAAA;;AAChBC,MAAAA,KAAK,CAAC,qBAAD,CAAL,CACCC,IADD,CACM,UAAAC,GAAG;AAAA,eAAEA,GAAG,CAACC,IAAJ,EAAF;AAAA,OADT,EAECF,IAFD,CAEM,UAAAG,MAAM;AAAA,eAAE,MAAI,CAACC,QAAL,CAAc;AAACN,UAAAA,SAAS,EAAEK;AAAZ,SAAd,CAAF;AAAA,OAFZ;AAGH;;;6BAEO;AACJE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWC,SAAX,CAAqB,CAArB,EAAwBS,IAApC;AACA,UAAIC,IAAI,GAAG,KAAKC,KAAL,CAAWD,IAAtB;AACA,UAAIE,OAAO,GAAGF,IAAI,CAACG,KAAL,CAAW,EAAX,CAAd;AACA,UAAIC,SAAS,GAAGF,OAAO,CAACG,GAAR,CAAY,UAACC,MAAD,EAASC,KAAT,EAAiB;AACzC,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAMD,MAAN,CAAP;AACH,OAFe,CAAhB;AAKA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMF,SAAN,CAFJ,EAGI;AAAQ,QAAA,OAAO,EAAE,KAAKb,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,CADJ;AAOH;;;;EA9BoCP,KAAK,CAACwB,S;;SAA1BpB,W","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport PropTypes from 'prop-types'\nimport RandomWords from 'random-words'\n\nexport default class DisplayWord extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            alphabets : []\n        };\n    }\n\n    componentDidMount() {\n        fetch('/games/merdeaf.json')\n        .then(res=>res.json())\n        .then(result=>this.setState({alphabets: result}));\n    }\n\n    render(){\n        console.log(this.state.alphabets[0].link)\n        let word = this.props.word;\n        let letters = word.split(\"\");\n        let splitword = letters.map((letter, index)=>{\n            return(<div>{letter}</div>);\n        });\n\n\n        return(\n            <div>\n                <div>yippee display</div>\n                <div>{splitword}</div>\n                <button onClick={this.fetch}>Click</button>\n            </div>\n            )\n    }\n}"]},"metadata":{},"sourceType":"module"}